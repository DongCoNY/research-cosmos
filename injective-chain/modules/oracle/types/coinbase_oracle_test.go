package types_test

import (
	"fmt"

	"github.com/ethereum/go-ethereum/common"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/InjectiveLabs/injective-core/injective-chain/modules/oracle/types"
)

var _ = Describe("Types test", func() {

	Describe("Coinbase Message Parse", func() {

		It("should not have error", func() {
			msgs := [][]byte{
				common.FromHex("0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000607fe06c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000cdd578cf00000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000"),
				common.FromHex("0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000607fee4000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000891e9d880000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000"),
				common.FromHex("0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000607fef3000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000056facc00000000000000000000000000000000000000000000000000000000000000067072696365730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358545a0000000000000000000000000000000000000000000000000000000000"),
			}

			sigs := [][]byte{
				common.FromHex("0x755d64ab12b52711b6ed6cea26b4005fe44884546bc6fbcb0ca31fd369e90a6f856cd792fb473603af598cb9946d3a5ceb627b26074b0294dcefd8d0d8f171d9000000000000000000000000000000000000000000000000000000000000001c"),
				common.FromHex("0x18a821b64b1a100cc1ff68c5b2ba2fa40de6f7abeb49981366b359af9d9f131e0db75d82358cf4e5850c38bff62d626034464740ba5e222c3aeeb05ea51c59f3000000000000000000000000000000000000000000000000000000000000001b"),
				common.FromHex("0x946c8037ce20231cdde2bb30cea45f4a2f60916d4e3a28d6e9ee82ff6a83d6fcb44073ed9561bb8b0f54e6256234e50770eded2042582c81a99e78581873759a000000000000000000000000000000000000000000000000000000000000001c"),
			}

			for i, msg := range msgs {
				coinbaseData, err := types.ParseCoinbaseMessage(msg)
				fmt.Println(coinbaseData)
				Expect(err).To(BeNil())

				err = types.ValidateCoinbaseSignature(msg, sigs[i])
				Expect(err).To(BeNil())
			}

		})
	})

})
